unit Main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Image1: TImage;
    StringGrid1: TStringGrid;
    DrawButton: TButton;
    procedure DrawButtonClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.DrawButtonClick(Sender: TObject);
  var
    X, Y, W, H, X0, Y0, I : Integer;
    DX, fX, fY : Double;
  begin
    {Создание графика Y = Sin(X), -Pi <= X <= Pi}
  W := Image1.Width; {Ширина компонента Image1}
  X0:= W div 2; {Пиксель, соответствующий точке X = 0}
  H := Image1.Height; {Высота компонента Image1}
  Y0:= H div 2; {Пиксель, соответствующий точке Y = 0}
  W := X0 - 4; {Диапазон рисования по горизонтальной оси от X0-W до X0+W (по 4 пикселя с каждой стороны - зазор)}
  H := Y0 - 4; {Диапазон рисования по вертикальной оси от Y0-H до Y0+H (о 4 пикселя с каждой стороны - зазор}
  {Устанавливаем цвет фона - белый. Используем свойство Brush}
  Image1.Canvas.Brush.Color := clWhite;
  {Устанавливаем цвет координатных линий - черный. Используем свойство Pen}
  Image1.Canvas.Pen.Color := clBlack;
  {Устанавливаем толщину координатных линий - 3 пикселя}
  Image1.Canvas.Pen.Width := 3;
  {Рисуем координатные линии. Ось "X" проходит от пикселя X0-W до X0+W (по горизонтали) на уровне пикселя Y0 (по вертикали)}
  {1. Перемещаем пер (свойство Pen) в начальную точку прорисовки горизонтальной линии}
  Image1.Canvas.MoveTo(X0-W,Y0);
  {2. Рисуем горизонтальную линию; указываем конечную точку линии. Линия рисуется от текущего положения пера (свойство Pen) до указываемой координаты в методе LineTo}
  Image1.Canvas.LineTo(X0+W,Y0);
  {3. Перемещаем пер (свойство Pen) в начальную точку прорисовки вертикальной линии}
  Image1.Canvas.MoveTo(X0,Y0-H);
  {4. Рисуем вертикальную линию}
  Image1.Canvas.LineTo(X0,Y0+H);
  {Система координат готова. Устанавливаем цвет линий функции - красный.}
  Image1.Canvas.Pen.Color := clRed;
  {Устанавливаем толщину линий прорисовки функции - 1 пиксель}
  Image1.Canvas.Pen.Width := 1;
  {Функция Y = Sin(X) на интервале от -Pi до Pi изменяется от -1 до 1.
   Пиксель Y0 соответствует значению функции Y = 0.
   Значению +1 будет соответствовать пиксель Y0-H.
   Значению -1 будет соответствовать пиксель Y0+H.
   Пиксель X0 соответствует значению аргумента функции X = 0.
   Значению -Pi будет соответствовать пиксель X0-W.
   Значению +Pi будет соответствовать пиксель X0+W.
   Первая точка (самая левая по оси X) - (-Pi, Sin(-Pi)).
   Вторая точка (по оси X) - (-Pi+DX, Sin(-Pi+DX)), где DX - шаг изменения координаты X, соответствующий 4-м пикселям. Для рисования необходимо использовать значения пикселей, соответствующих каждой точке. Эти значения определяются пересчетом в соответствии с выбранным масштабом по горизонтали (значение переменной W) и вертикали (значение переменной H).}
  {Значения самой первой точки}
  fX := -Pi;
  fY := Sin(fX);
  {Определяем значения пикселей, соответствующих этой точке}
  X := X0 - W;
  Y := Y0 - Round(fY * H);
  {Выводим начальную точку}
  Image1.Canvas.Pixels[X,Y] := clRed;
  {Цикл по всем остальным точкам}
  while X <= (X0+W) do
  begin{Выводить пиксели до тех пор, пока не будет достигнута правая граница}
    X := X + 4; {Значение в пикселях координаты X новой точки}
    {Определяем координаты, соответствующие этой точке}
    fX := (X - X0)*Pi/W;
    fY := Sin(fX);
    {Определяем значения пикселя Y, соответствующих этой точке}
    Y := Y0 - Round(fY * H);
    {Выводим новую точку}
    Image1.Canvas.Pixels[X,Y] := clRed;
  end;
  end;

end.
